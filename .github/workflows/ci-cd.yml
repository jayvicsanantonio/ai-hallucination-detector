name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Security audit
        run: npm audit --audit-level=high

      # Security scan removed - Snyk authentication issues

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: certaintyai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: certaintyai_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: postgres
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start test environment
        run: docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres; do sleep 2; done'
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T redis redis-cli ping; do sleep 2; done'

      - name: Run E2E tests
        run: npm run test:e2e:run
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5433
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6380

      - name: Upload E2E test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-reports
          path: test-reports/

      - name: Cleanup test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start test environment
        run: docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres; do sleep 2; done'
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T redis redis-cli ping; do sleep 2; done'

      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: test-reports/

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start test environment
        run: docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres pg_isready -U postgres; do sleep 2; done'
          timeout 60 bash -c 'until docker-compose -f docker-compose.test.yml exec -T redis redis-cli ping; do sleep 2; done'

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: test-reports/

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Build and Push Docker Image
  build-image:
    runs-on: ubuntu-latest
    needs: [test, e2e-tests, performance-tests, security-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          export IMAGE_TAG="${{ needs.build-image.outputs.image-tag }}"

          # Update image tag in deployment
          sed -i "s|IMAGE_TAG_PLACEHOLDER|${IMAGE_TAG}|g" k8s/api-gateway-deployment.yaml
          sed -i "s|IMAGE_TAG_PLACEHOLDER|${IMAGE_TAG}|g" k8s/content-processor-deployment.yaml
          sed -i "s|IMAGE_TAG_PLACEHOLDER|${IMAGE_TAG}|g" k8s/verification-engine-deployment.yaml

          # Apply Kubernetes manifests
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/redis-deployment.yaml
          kubectl apply -f k8s/api-gateway-deployment.yaml
          kubectl apply -f k8s/content-processor-deployment.yaml
          kubectl apply -f k8s/verification-engine-deployment.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/monitoring.yaml

      - name: Wait for deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/api-gateway -n certaintyai --timeout=300s
          kubectl rollout status deployment/content-processor -n certaintyai --timeout=300s
          kubectl rollout status deployment/verification-engine -n certaintyai --timeout=300s

      - name: Run smoke tests
        run: |
          export STAGING_URL="${{ secrets.STAGING_URL }}"
          npm run test:smoke -- --baseUrl=$STAGING_URL

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Blue-Green Deployment
        run: |
          export KUBECONFIG=kubeconfig
          export IMAGE_TAG="${{ needs.build-image.outputs.image-tag }}"

          # Determine current and next environments
          CURRENT_ENV=$(kubectl get service api-gateway-active -n certaintyai -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo "blue")
          if [ "$CURRENT_ENV" = "blue" ]; then
            NEXT_ENV="green"
          else
            NEXT_ENV="blue"
          fi

          echo "Current environment: $CURRENT_ENV"
          echo "Deploying to: $NEXT_ENV"

          # Update deployment manifests with new environment and image
          sed -i "s|IMAGE_TAG_PLACEHOLDER|${IMAGE_TAG}|g" k8s/api-gateway-deployment.yaml
          sed -i "s|version: blue|version: ${NEXT_ENV}|g" k8s/api-gateway-deployment.yaml
          sed -i "s|app: api-gateway|app: api-gateway-${NEXT_ENV}|g" k8s/api-gateway-deployment.yaml

          # Apply new deployment
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/api-gateway-deployment.yaml
          kubectl apply -f k8s/content-processor-deployment.yaml
          kubectl apply -f k8s/verification-engine-deployment.yaml

          # Wait for new deployment to be ready
          kubectl rollout status deployment/api-gateway-${NEXT_ENV} -n certaintyai --timeout=600s

      - name: Health check new deployment
        run: |
          export KUBECONFIG=kubeconfig

          # Get the service endpoint for health check
          HEALTH_URL=$(kubectl get service api-gateway-${NEXT_ENV} -n certaintyai -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          # Wait for health check to pass
          for i in {1..30}; do
            if curl -f "http://${HEALTH_URL}/api/v1/health"; then
              echo "Health check passed"
              break
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done

      - name: Run production smoke tests
        run: |
          export PRODUCTION_URL="${{ secrets.PRODUCTION_URL }}"
          npm run test:smoke -- --baseUrl=$PRODUCTION_URL

      - name: Switch traffic to new deployment
        run: |
          export KUBECONFIG=kubeconfig

          # Update active service to point to new deployment
          kubectl patch service api-gateway-active -n certaintyai -p '{"spec":{"selector":{"version":"'${NEXT_ENV}'"}}}'

          echo "Traffic switched to $NEXT_ENV environment"

      - name: Cleanup old deployment
        run: |
          export KUBECONFIG=kubeconfig

          # Wait 5 minutes before cleaning up old deployment
          sleep 300

          # Delete old deployment
          kubectl delete deployment api-gateway-${CURRENT_ENV} -n certaintyai --ignore-not-found=true

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production

    steps:
      - name: Rollback production deployment
        run: |
          export KUBECONFIG=kubeconfig

          # Get previous deployment
          PREVIOUS_DEPLOYMENT=$(kubectl rollout history deployment/api-gateway -n certaintyai --revision=1 | tail -1 | awk '{print $1}')

          # Rollback to previous version
          kubectl rollout undo deployment/api-gateway -n certaintyai --to-revision=$PREVIOUS_DEPLOYMENT
          kubectl rollout undo deployment/content-processor -n certaintyai --to-revision=$PREVIOUS_DEPLOYMENT
          kubectl rollout undo deployment/verification-engine -n certaintyai --to-revision=$PREVIOUS_DEPLOYMENT

          # Wait for rollback to complete
          kubectl rollout status deployment/api-gateway -n certaintyai --timeout=300s

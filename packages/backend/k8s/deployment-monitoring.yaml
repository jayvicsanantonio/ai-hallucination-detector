apiVersion: v1
kind: ServiceMonitor
metadata:
  name: certaintyai-monitoring
  namespace: certaintyai
  labels:
    app: certaintyai
spec:
  selector:
    matchLabels:
      app: api-gateway
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: certaintyai-alerts
  namespace: certaintyai
  labels:
    app: certaintyai
spec:
  groups:
    - name: certaintyai.deployment
      rules:
        - alert: DeploymentFailed
          expr: kube_deployment_status_replicas_unavailable{deployment=~"api-gateway-.*", namespace="certaintyai"} > 0
          for: 5m
          labels:
            severity: critical
            component: deployment
          annotations:
            summary: 'CertaintyAI deployment has unavailable replicas'
            description: 'Deployment {{ $labels.deployment }} has {{ $value }} unavailable replicas for more than 5 minutes'

        - alert: HighErrorRate
          expr: rate(http_requests_total{status=~"5..", namespace="certaintyai"}[5m]) > 0.1
          for: 2m
          labels:
            severity: warning
            component: api
          annotations:
            summary: 'High error rate detected'
            description: 'Error rate is {{ $value }} errors per second'

        - alert: HighResponseTime
          expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{namespace="certaintyai"}[5m])) > 2
          for: 5m
          labels:
            severity: warning
            component: performance
          annotations:
            summary: 'High response time detected'
            description: '95th percentile response time is {{ $value }} seconds'

        - alert: PodCrashLooping
          expr: rate(kube_pod_container_status_restarts_total{namespace="certaintyai"}[15m]) > 0
          for: 5m
          labels:
            severity: critical
            component: stability
          annotations:
            summary: 'Pod is crash looping'
            description: 'Pod {{ $labels.pod }} is restarting frequently'

        - alert: LowSuccessRate
          expr: rate(http_requests_total{status=~"2..", namespace="certaintyai"}[5m]) / rate(http_requests_total{namespace="certaintyai"}[5m]) < 0.95
          for: 5m
          labels:
            severity: warning
            component: reliability
          annotations:
            summary: 'Low success rate detected'
            description: 'Success rate is {{ $value | humanizePercentage }}'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: deployment-validation-config
  namespace: certaintyai
data:
  validation-rules.yaml: |
    validation:
      health_check:
        endpoint: "/api/v1/health"
        timeout: 30s
        expected_status: 200
        required_fields:
          - status
          - timestamp
          - services
      
      performance:
        response_time_threshold: 2s
        success_rate_threshold: 95%
        error_rate_threshold: 5%
      
      security:
        required_headers:
          - x-content-type-options
          - x-frame-options
          - x-xss-protection
        tls_version: "1.3"
      
      functionality:
        endpoints:
          - path: "/api/v1/verify"
            method: "POST"
            auth_required: true
          - path: "/api/v1/results/{id}"
            method: "GET"
            auth_required: true
          - path: "/api/v1/feedback"
            method: "POST"
            auth_required: true

---
apiVersion: batch/v1
kind: Job
metadata:
  name: deployment-validation
  namespace: certaintyai
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
        - name: validator
          image: curlimages/curl:latest
          command:
            - /bin/sh
            - -c
            - |
              set -e

              echo "Starting deployment validation..."

              # Health check
              echo "Checking health endpoint..."
              curl -f http://api-gateway-active/api/v1/health || exit 1

              # Performance check
              echo "Checking response time..."
              START_TIME=$(date +%s%N)
              curl -f http://api-gateway-active/api/v1/health > /dev/null
              END_TIME=$(date +%s%N)
              RESPONSE_TIME=$(( (END_TIME - START_TIME) / 1000000 ))

              if [ $RESPONSE_TIME -gt 2000 ]; then
                echo "Response time too high: ${RESPONSE_TIME}ms"
                exit 1
              fi

              echo "Response time OK: ${RESPONSE_TIME}ms"

              # Security headers check
              echo "Checking security headers..."
              HEADERS=$(curl -I http://api-gateway-active/api/v1/health 2>/dev/null)

              if ! echo "$HEADERS" | grep -i "x-content-type-options: nosniff"; then
                echo "Missing x-content-type-options header"
                exit 1
              fi

              if ! echo "$HEADERS" | grep -i "x-frame-options: DENY"; then
                echo "Missing x-frame-options header"
                exit 1
              fi

              echo "Security headers OK"

              # API availability check
              echo "Checking API availability..."

              # Should return 401 without auth
              if ! curl -f -X POST http://api-gateway-active/api/v1/verify \
                   -H "Content-Type: application/json" \
                   -d '{"content":"test","contentType":"text","domain":"financial"}' \
                   -w "%{http_code}" -o /dev/null | grep -q "401"; then
                echo "API authentication not working properly"
                exit 1
              fi

              echo "API availability OK"

              echo "Deployment validation completed successfully!"

---
apiVersion: v1
kind: Service
metadata:
  name: deployment-validator
  namespace: certaintyai
spec:
  selector:
    app: deployment-validator
  ports:
    - port: 8080
      targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-validator
  namespace: certaintyai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: deployment-validator
  template:
    metadata:
      labels:
        app: deployment-validator
    spec:
      containers:
        - name: validator
          image: node:18-alpine
          ports:
            - containerPort: 8080
          env:
            - name: NODE_ENV
              value: 'production'
            - name: VALIDATION_INTERVAL
              value: '60000' # 1 minute
          command:
            - /bin/sh
            - -c
            - |
              cat > /app/validator.js << 'EOF'
              const http = require('http');
              const https = require('https');

              class DeploymentValidator {
                constructor() {
                  this.interval = process.env.VALIDATION_INTERVAL || 60000;
                  this.targetUrl = process.env.TARGET_URL || 'http://api-gateway-active';
                }
                
                async validateDeployment() {
                  try {
                    console.log('Running deployment validation...');
                    
                    // Health check
                    await this.checkHealth();
                    
                    // Performance check
                    await this.checkPerformance();
                    
                    // Security check
                    await this.checkSecurity();
                    
                    console.log('✅ Deployment validation passed');
                    return true;
                  } catch (error) {
                    console.error('❌ Deployment validation failed:', error.message);
                    return false;
                  }
                }
                
                async checkHealth() {
                  return new Promise((resolve, reject) => {
                    const req = http.get(`${this.targetUrl}/api/v1/health`, (res) => {
                      if (res.statusCode !== 200) {
                        reject(new Error(`Health check failed: ${res.statusCode}`));
                        return;
                      }
                      
                      let data = '';
                      res.on('data', chunk => data += chunk);
                      res.on('end', () => {
                        try {
                          const health = JSON.parse(data);
                          if (health.status !== 'healthy') {
                            reject(new Error(`Health status: ${health.status}`));
                            return;
                          }
                          resolve();
                        } catch (error) {
                          reject(new Error('Invalid health response'));
                        }
                      });
                    });
                    
                    req.on('error', reject);
                    req.setTimeout(5000, () => reject(new Error('Health check timeout')));
                  });
                }
                
                async checkPerformance() {
                  const start = Date.now();
                  await this.checkHealth();
                  const duration = Date.now() - start;
                  
                  if (duration > 2000) {
                    throw new Error(`Response time too high: ${duration}ms`);
                  }
                }
                
                async checkSecurity() {
                  return new Promise((resolve, reject) => {
                    const req = http.get(`${this.targetUrl}/api/v1/health`, (res) => {
                      const requiredHeaders = [
                        'x-content-type-options',
                        'x-frame-options',
                        'x-xss-protection'
                      ];
                      
                      for (const header of requiredHeaders) {
                        if (!res.headers[header]) {
                          reject(new Error(`Missing security header: ${header}`));
                          return;
                        }
                      }
                      
                      resolve();
                    });
                    
                    req.on('error', reject);
                  });
                }
                
                start() {
                  console.log('Starting deployment validator...');
                  
                  // Initial validation
                  this.validateDeployment();
                  
                  // Periodic validation
                  setInterval(() => {
                    this.validateDeployment();
                  }, this.interval);
                  
                  // HTTP server for health checks
                  const server = http.createServer((req, res) => {
                    if (req.url === '/health') {
                      res.writeHead(200, { 'Content-Type': 'application/json' });
                      res.end(JSON.stringify({ status: 'healthy' }));
                    } else {
                      res.writeHead(404);
                      res.end();
                    }
                  });
                  
                  server.listen(8080, () => {
                    console.log('Validator server listening on port 8080');
                  });
                }
              }

              const validator = new DeploymentValidator();
              validator.start();
              EOF

              node /app/validator.js
          resources:
            requests:
              memory: '64Mi'
              cpu: '50m'
            limits:
              memory: '128Mi'
              cpu: '100m'
